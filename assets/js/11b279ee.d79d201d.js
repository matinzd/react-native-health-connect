"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[755],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),d=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},l=function(e){var r=d(e.components);return n.createElement(c.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?n.createElement(f,a(a({ref:r},l),{},{components:t})):n.createElement(f,a({ref:r},l))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=t[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4112:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=t(7462),o=(t(7294),t(3905));const i={title:"insertRecords"},a="insertRecords",s={unversionedId:"api/methods/insertRecords",id:"api/methods/insertRecords",title:"insertRecords",description:"Inserts one or more record and returns newly generated records' uuids. Insertion of multiple records is executed in a transaction - if one fails, none is inserted.",source:"@site/docs/api/methods/06-insertRecords.md",sourceDirName:"api/methods",slug:"/api/methods/insertRecords",permalink:"/react-native-health-connect/docs/api/methods/insertRecords",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/06-insertRecords.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"insertRecords"},sidebar:"tutorialSidebar",previous:{title:"revokeAllPermissions",permalink:"/react-native-health-connect/docs/api/methods/revokeAllPermissions"},next:{title:"readRecords",permalink:"/react-native-health-connect/docs/api/methods/readRecords"}},c={},d=[],l={toc:d};function p(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"insertrecords"},(0,o.kt)("inlineCode",{parentName:"h1"},"insertRecords")),(0,o.kt)("p",null,"Inserts one or more record and returns newly generated records' uuids. Insertion of multiple records is executed in a transaction - if one fails, none is inserted."),(0,o.kt)("h1",{id:"method"},"Method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"insertRecords(records: HealthConnectRecord[]): Promise<string[]>;\n")),(0,o.kt)("h1",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { insertRecords } from 'react-native-health-connect';\n\nconst insertSampleData = () => {\n  insertRecords([\n    {\n      recordType: 'ActiveCaloriesBurned',\n      energy: { unit: 'kilocalories', value: 10000 },\n      startTime: '2023-01-09T10:00:00.405Z',\n      endTime: '2023-01-09T11:53:15.405Z',\n      metadata: {\n        recordingMethod:\n          RecordingMethod.RECORDING_METHOD_AUTOMATICALLY_RECORDED,\n        device: {\n          manufacturer: 'Google',\n          model: 'Pixel 4',\n          type: DeviceType.TYPE_PHONE,\n        },\n      },\n    },\n    {\n      recordType: 'ActiveCaloriesBurned',\n      energy: { unit: 'kilocalories', value: 15000 },\n      startTime: '2023-01-09T12:00:00.405Z',\n      endTime: '2023-01-09T23:53:15.405Z',\n    },\n  ]).then((ids) => {\n    console.log('Records inserted ', { ids }); // Records inserted  {\"ids\": [\"06bef46e-9383-4cc1-94b6-07a5045b764a\", \"a7bdea65-86ce-4eb2-a9ef-a87e6a7d9df2\"]}\n  });\n};\n")))}p.isMDXComponent=!0}}]);