"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[559],{1596:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api/overview","title":"Overview","description":"Available methods","source":"@site/docs/api/overview.md","sourceDirName":"api","slug":"/api/overview","permalink":"/react-native-health-connect/docs/api/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Overview"},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/react-native-health-connect/docs/category/api-reference"},"next":{"title":"Methods","permalink":"/react-native-health-connect/docs/category/methods"}}');var n=s(4848),r=s(8453);const d={sidebar_position:1,title:"Overview"},o=void 0,c={},a=[{value:"Available methods",id:"available-methods",level:2},{value:"Special Permissions",id:"special-permissions",level:2}];function l(e){const t={h2:"h2",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"available-methods",children:"Available methods"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Method"})}),(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Description"})})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"getSdkStatus"}),(0,n.jsx)(t.td,{children:"Determines whether an implementation of HealthConnectClient is available on the device at the moment. If none is available, apps may choose to redirect to package installers to find suitable providers."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"initialize"}),(0,n.jsx)(t.td,{children:"Initialize the health connect client."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"openHealthConnectSettings"}),(0,n.jsx)(t.td,{children:"Opens Health Connect app's settings app."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"openHealthConnectDataManagement"}),(0,n.jsx)(t.td,{children:"Opens Health Connect data management screen app."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"requestPermission"}),(0,n.jsx)(t.td,{children:"Request permission for specified record types and access types."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"getGrantedPermissions"}),(0,n.jsx)(t.td,{children:"Returns a set of all health permissions granted by the user to the calling provider app."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"revokeAllPermissions"}),(0,n.jsx)(t.td,{children:"Revokes all previously granted permissions by the user to the calling app."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"insertRecords"}),(0,n.jsx)(t.td,{children:"Inserts one or more records and returns newly assigned generated UUIDs. Insertion of multiple records is executed in a transaction - if one fails, none is inserted."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"readRecords"}),(0,n.jsx)(t.td,{children:"Retrieves a collection of records."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"readRecord"}),(0,n.jsx)(t.td,{children:"Retrieves a single record of the specified type."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"aggregateRecord"}),(0,n.jsx)(t.td,{children:"Reads aggregated results according to requested read criteria, for e.g, data origin filter and within a time range."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"deleteRecordsByUuids"}),(0,n.jsx)(t.td,{children:"Deletes one or more records by their identifiers. Deletion of multiple records is executed in a single transaction - if one fails, none is deleted."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"deleteRecordsByTimeRange"}),(0,n.jsx)(t.td,{children:"Deletes any record of the given record type in the given time range (automatically filtered to a record belonging to the calling application). Deletion of multiple records is executed in a transaction - if one fails, none is deleted."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"requestExerciseRoute"}),(0,n.jsx)(t.td,{children:"Requests permission to access exercise route data for a specific exercise session."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"special-permissions",children:"Special Permissions"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Permission Type"})}),(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Description"})})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"BackgroundAccessPermission"}),(0,n.jsx)(t.td,{children:"Allows your app to read health data in the background, even when your app is not in the foreground."})]})})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>o});var i=s(6540);const n={},r=i.createContext(n);function d(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);