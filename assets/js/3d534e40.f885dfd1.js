"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[663],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var g=a.createContext({}),d=function(e){var t=a.useContext(g),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=d(e.components);return a.createElement(g.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,g=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=d(r),u=n,m=s["".concat(g,".").concat(u)]||s[u]||p[u]||o;return r?a.createElement(m,i(i({ref:t},l),{},{components:r})):a.createElement(m,i({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var g in t)hasOwnProperty.call(t,g)&&(c[g]=t[g]);c.originalType=e,c[s]="string"==typeof e?e:n,i[1]=c;for(var d=2;d<o;d++)i[d]=r[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},716:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=r(7462),n=(r(7294),r(3905));const o={title:"aggregateRecord"},i="aggregateRecord",c={unversionedId:"api/methods/aggregateRecord",id:"api/methods/aggregateRecord",title:"aggregateRecord",description:"Reads aggregated result according to requested read criteria, for e.g, data origin filter and within a time range. Some record types do not support aggregation.",source:"@site/docs/api/methods/09-aggregateRecord.md",sourceDirName:"api/methods",slug:"/api/methods/aggregateRecord",permalink:"/react-native-health-connect/docs/api/methods/aggregateRecord",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/09-aggregateRecord.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"aggregateRecord"},sidebar:"tutorialSidebar",previous:{title:"readRecord",permalink:"/react-native-health-connect/docs/api/methods/readRecord"},next:{title:"aggregateGroupByDuration",permalink:"/react-native-health-connect/docs/api/methods/aggregateGroupByDuration"}},g={},d=[],l={toc:d};function s(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"aggregaterecord"},(0,n.kt)("inlineCode",{parentName:"h1"},"aggregateRecord")),(0,n.kt)("p",null,"Reads aggregated result according to requested read criteria, for e.g, data origin filter and within a time range. Some record types do not support aggregation."),(0,n.kt)("h1",{id:"method"},"Method"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"aggregateRecord<T extends AggregateResultRecordType>(\n    request: AggregateRequest<T>\n): Promise<AggregateResult<T>>\n")),(0,n.kt)("h1",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { aggregateRecord } from \'react-native-health-connect\';\n\nconst aggregateSampleData = () => {\n  aggregateRecord({\n    recordType: \'ActiveCaloriesBurned\',\n    timeRangeFilter: {\n      operator: \'between\',\n      startTime: \'2023-01-09T12:00:00.405Z\',\n      endTime: \'2023-01-09T23:53:15.405Z\',\n    },\n  }).then((result) => {\n    console.log(\'Aggregated record: \', { result }); // Aggregated record:  {"result": {"dataOrigins": ["com.healthconnectexample"], "inCalories": 15000000, "inJoules": 62760000.00989097, "inKilocalories": 15000, "inKilojoules": 62760.00000989097}}\n  });\n};\n')))}s.isMDXComponent=!0}}]);