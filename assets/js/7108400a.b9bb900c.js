"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[136],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),g=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=g(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=g(r),u=a,m=c["".concat(s,".").concat(u)]||c[u]||l[u]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[c]="string"==typeof e?e:a,i[1]=d;for(var g=2;g<o;g++)i[g]=r[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4495:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>g});var n=r(7462),a=(r(7294),r(3905));const o={title:"aggregateGroupByPeriod"},i="aggregateGroupByPeriod",d={unversionedId:"api/methods/aggregateGroupByPeriod",id:"api/methods/aggregateGroupByPeriod",title:"aggregateGroupByPeriod",description:"Reads aggregated group result by Period according to requested read criteria. timeRangeSlicer needs to be specified for the Period type ('DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS') and length. Period is date-based amount of time as opposed to Duration, which is a fixed length of time. Some record types do not support aggregation.",source:"@site/docs/api/methods/11-aggregateGroupByPeriod.md",sourceDirName:"api/methods",slug:"/api/methods/aggregateGroupByPeriod",permalink:"/react-native-health-connect/docs/api/methods/aggregateGroupByPeriod",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/11-aggregateGroupByPeriod.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"aggregateGroupByPeriod"},sidebar:"tutorialSidebar",previous:{title:"aggregateGroupByDuration",permalink:"/react-native-health-connect/docs/api/methods/aggregateGroupByDuration"},next:{title:"deleteRecordsByTimeRange",permalink:"/react-native-health-connect/docs/api/methods/deleteRecordsByTimeRange"}},s={},g=[],p={toc:g};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aggregategroupbyperiod"},(0,a.kt)("inlineCode",{parentName:"h1"},"aggregateGroupByPeriod")),(0,a.kt)("p",null,"Reads aggregated group result by Period according to requested read criteria. ",(0,a.kt)("inlineCode",{parentName:"p"},"timeRangeSlicer")," needs to be specified for the Period type (",(0,a.kt)("inlineCode",{parentName:"p"},"'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS'"),") and length. ",(0,a.kt)("inlineCode",{parentName:"p"},"Period")," is date-based amount of time as opposed to ",(0,a.kt)("inlineCode",{parentName:"p"},"Duration"),", which is a fixed length of time. Some record types do not support aggregation."),(0,a.kt)("h1",{id:"method"},"Method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"aggregateGroupByPeriod<T extends AggregateResultRecordType>(\n  request: AggregateGroupByPeriodRequest<T>\n): Promise<AggregationGroupResult<T>[]>\n")),(0,a.kt)("h1",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { aggregateGroupByPeriod } from \'react-native-health-connect\';\n\nconst aggregateSampleData = () => {\n  aggregateGroupByPeriod({\n    recordType: \'Steps\',\n    timeRangeFilter: {\n      operator: \'between\',\n      startTime: \'2024-09-03T15:00\',\n      endTime: \'2024-09-11T10:50:12.182\',\n    },\n    timeRangeSlicer: {\n      period: \'DAYS\',\n      length: 1,\n    },\n  }).then((result) => {\n    console.log(\'Aggregated Group by Period: \', { result }); // Aggregated record: {"result": [{"endTime": "2024-09-04T15:00", "startTime": "2024-09-03T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 1000}}, {"endTime": "2024-09-05T15:00", "startTime": "2024-09-04T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 2000}}, {"endTime": "2024-09-06T15:00", "startTime": "2024-09-05T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 3000}}, {"endTime": "2024-09-07T15:00", "startTime": "2024-09-06T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 4000}}, {"endTime": "2024-09-08T15:00", "startTime": "2024-09-07T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 5000}}, {"endTime": "2024-09-09T15:00", "startTime": "2024-09-08T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 6000}}, {"endTime": "2024-09-10T15:00", "startTime": "2024-09-09T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 7000}}, {"endTime": "2024-09-11T10:50:12.182", "startTime": "2024-09-10T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 0}}]}\n  });\n};\n')))}c.isMDXComponent=!0}}]);