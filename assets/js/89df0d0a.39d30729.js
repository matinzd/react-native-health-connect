"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[689],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),l=p(r),d=s,f=l["".concat(c,".").concat(d)]||l[d]||u[d]||i;return r?n.createElement(f,o(o({ref:t},m),{},{components:r})):n.createElement(f,o({ref:t},m))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=r.length,o=new Array(i);o[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[l]="string"==typeof e?e:s,o[1]=a;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4142:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=r(7462),s=(r(7294),r(3905));const i={title:"requestPermission"},o="requestPermission",a={unversionedId:"api/methods/requestPermission",id:"api/methods/requestPermission",title:"requestPermission",description:"Request permission for specified record types and access types.",source:"@site/docs/api/methods/03-requestPermission.md",sourceDirName:"api/methods",slug:"/api/methods/requestPermission",permalink:"/react-native-health-connect/docs/api/methods/requestPermission",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/03-requestPermission.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"requestPermission"},sidebar:"tutorialSidebar",previous:{title:"getSdkStatus",permalink:"/react-native-health-connect/docs/api/methods/getSdkStatus"},next:{title:"getGrantedPermissions",permalink:"/react-native-health-connect/docs/api/methods/getGrantedPermissions"}},c={},p=[],m={toc:p};function l(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"requestpermission"},(0,s.kt)("inlineCode",{parentName:"h1"},"requestPermission")),(0,s.kt)("p",null,"Request permission for specified record types and access types."),(0,s.kt)("h1",{id:"method"},"Method"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"requestPermission(permissions: Permission[]): Promise<Permission[]>\n")),(0,s.kt)("h1",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { requestPermission } from 'react-native-health-connect';\n\nconst requestPermissions = () => {\n  requestPermission([\n    {\n      accessType: 'read',\n      recordType: 'ActiveCaloriesBurned',\n    },\n    {\n      accessType: 'write',\n      recordType: 'ActiveCaloriesBurned',\n    },\n  ]).then((permissions) => {\n    console.log('Granted permissions ', { permissions });\n  });\n};\n")),(0,s.kt)("p",null,"If your app needs to write exercise routes, can include it as a special permission:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { requestPermission } from 'react-native-health-connect';\n\nconst requestPermissions = () => {\n  requestPermission([\n    {\n      accessType: 'read',\n      recordType: 'ExerciseSession',\n    },\n    {\n      accessType: 'write',\n      recordType: 'ExerciseSession',\n    },\n    {\n      accessType: 'write',\n      recordType: 'ExerciseRoute'\n    }\n  ]).then((permissions) => {\n    console.log('Granted permissions ', { permissions });\n  });\n};\n")))}l.isMDXComponent=!0}}]);