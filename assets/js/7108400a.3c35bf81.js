"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[634],{5396:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>g});const a=JSON.parse('{"id":"api/methods/aggregateGroupByPeriod","title":"aggregateGroupByPeriod","description":"Reads aggregated group result by Period according to requested read criteria. timeRangeSlicer needs to be specified for the Period type (\'DAYS\' | \'WEEKS\' | \'MONTHS\' | \'YEARS\') and length. Period is date-based amount of time as opposed to Duration, which is a fixed length of time. Some record types do not support aggregation.","source":"@site/docs/api/methods/11-aggregateGroupByPeriod.md","sourceDirName":"api/methods","slug":"/api/methods/aggregateGroupByPeriod","permalink":"/react-native-health-connect/docs/api/methods/aggregateGroupByPeriod","draft":false,"unlisted":false,"editUrl":"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/11-aggregateGroupByPeriod.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"aggregateGroupByPeriod"},"sidebar":"tutorialSidebar","previous":{"title":"aggregateGroupByDuration","permalink":"/react-native-health-connect/docs/api/methods/aggregateGroupByDuration"},"next":{"title":"deleteRecordsByTimeRange","permalink":"/react-native-health-connect/docs/api/methods/deleteRecordsByTimeRange"}}');var o=r(4848),n=r(8453);const i={title:"aggregateGroupByPeriod"},d="aggregateGroupByPeriod",s={},g=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"aggregategroupbyperiod",children:(0,o.jsx)(t.code,{children:"aggregateGroupByPeriod"})})}),"\n",(0,o.jsxs)(t.p,{children:["Reads aggregated group result by Period according to requested read criteria. ",(0,o.jsx)(t.code,{children:"timeRangeSlicer"})," needs to be specified for the Period type (",(0,o.jsx)(t.code,{children:"'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS'"}),") and length. ",(0,o.jsx)(t.code,{children:"Period"})," is date-based amount of time as opposed to ",(0,o.jsx)(t.code,{children:"Duration"}),", which is a fixed length of time. Some record types do not support aggregation."]}),"\n",(0,o.jsx)(t.h1,{id:"method",children:"Method"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"aggregateGroupByPeriod<T extends AggregateResultRecordType>(\n  request: AggregateGroupByPeriodRequest<T>\n): Promise<AggregationGroupResult<T>[]>\n"})}),"\n",(0,o.jsx)(t.h1,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'import { aggregateGroupByPeriod } from \'react-native-health-connect\';\n\nconst aggregateSampleData = () => {\n  aggregateGroupByPeriod({\n    recordType: \'Steps\',\n    timeRangeFilter: {\n      operator: \'between\',\n      startTime: \'2024-09-03T15:00\',\n      endTime: \'2024-09-11T10:50:12.182\',\n    },\n    timeRangeSlicer: {\n      period: \'DAYS\',\n      length: 1,\n    },\n  }).then((result) => {\n    console.log(\'Aggregated Group by Period: \', { result }); // Aggregated record: {"result": [{"endTime": "2024-09-04T15:00", "startTime": "2024-09-03T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 1000}}, {"endTime": "2024-09-05T15:00", "startTime": "2024-09-04T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 2000}}, {"endTime": "2024-09-06T15:00", "startTime": "2024-09-05T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 3000}}, {"endTime": "2024-09-07T15:00", "startTime": "2024-09-06T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 4000}}, {"endTime": "2024-09-08T15:00", "startTime": "2024-09-07T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 5000}}, {"endTime": "2024-09-09T15:00", "startTime": "2024-09-08T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 6000}}, {"endTime": "2024-09-10T15:00", "startTime": "2024-09-09T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 7000}}, {"endTime": "2024-09-11T10:50:12.182", "startTime": "2024-09-10T15:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 0}}]}\n  });\n};\n'})})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>d});var a=r(6540);const o={},n=a.createContext(o);function i(e){const t=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);