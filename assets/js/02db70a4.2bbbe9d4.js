"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[806],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function g(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},s="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=g(e,["components","mdxType","originalType","parentName"]),s=p(r),d=a,m=s["".concat(u,".").concat(d)]||s[d]||l[d]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var g={};for(var u in t)hasOwnProperty.call(t,u)&&(g[u]=t[u]);g.originalType=e,g[s]="string"==typeof e?e:a,i[1]=g;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4580:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>g,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"aggregateGroupByDuration"},i="aggregateGroupByDuration",g={unversionedId:"api/methods/aggregateGroupByDuration",id:"api/methods/aggregateGroupByDuration",title:"aggregateGroupByDuration",description:"Reads aggregated group result by Duration according to requested read criteria. timeRangeSlicer needs to be specified for the Duration type (MILLIS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS) and length. Some record types do not support aggregation.",source:"@site/docs/api/methods/10-aggregateGroupByDuration.md",sourceDirName:"api/methods",slug:"/api/methods/aggregateGroupByDuration",permalink:"/react-native-health-connect/docs/api/methods/aggregateGroupByDuration",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/10-aggregateGroupByDuration.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"aggregateGroupByDuration"},sidebar:"tutorialSidebar",previous:{title:"aggregateRecord",permalink:"/react-native-health-connect/docs/api/methods/aggregateRecord"},next:{title:"aggregateGroupByPeriod",permalink:"/react-native-health-connect/docs/api/methods/aggregateGroupByPeriod"}},u={},p=[],c={toc:p};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aggregategroupbyduration"},(0,a.kt)("inlineCode",{parentName:"h1"},"aggregateGroupByDuration")),(0,a.kt)("p",null,"Reads aggregated group result by Duration according to requested read criteria. ",(0,a.kt)("inlineCode",{parentName:"p"},"timeRangeSlicer")," needs to be specified for the Duration type (",(0,a.kt)("inlineCode",{parentName:"p"},"MILLIS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS"),") and length. Some record types do not support aggregation."),(0,a.kt)("h1",{id:"method"},"Method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"aggregateGroupByDuration<T extends AggregateResultRecordType>(\n  request: AggregateGroupByDurationRequest<T>\n): Promise<AggregationGroupResult<T>[]>\n")),(0,a.kt)("h1",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { aggregateGroupByDuration } from \'react-native-health-connect\';\n\nconst aggregateSampleData = () => {\n  aggregateGroupByDuration({\n    recordType: \'Steps\',\n    timeRangeFilter: {\n      operator: \'between\',\n      startTime: \'2024-10-04T15:00:00Z\',\n      endTime: \'2024-10-12T14:57:39.714Z\',\n    },\n    timeRangeSlicer: {\n      duration: \'DAYS\',\n      length: 2,\n    },\n  }).then((result) => {\n    console.log(\'Aggregated Group by Duration: \', { result }); // Aggregated record: {"result": [{"endTime": "2024-10-06T15:00:00Z", "startTime": "2024-10-04T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 3000}}, {"endTime": "2024-10-08T15:00:00Z", "startTime": "2024-10-06T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 7000}}, {"endTime": "2024-10-10T15:00:00Z", "startTime": "2024-10-08T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 11000}}, {"endTime": "2024-10-12T14:57:39.714Z", "startTime": "2024-10-10T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 7000}}]}\n  });\n};\n')))}s.isMDXComponent=!0}}]);