"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[853],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(h,s(s({ref:t},u),{},{components:r})):n.createElement(h,s({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[p]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},816:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const i={title:"requestExerciseRoute"},s="requestExerciseRoute",a={unversionedId:"api/methods/requestExerciseRoute",id:"api/methods/requestExerciseRoute",title:"requestExerciseRoute",description:"Health Connect requires users' permission to access routes for exercise records (see Android docs). When exercise records are fetched, they will include an exerciseRoute field with a type (and possibly a route). This method should be called to request permissions to fetch the route if the type is ExerciseRouteResultType.CONSENT_REQUIRED.",source:"@site/docs/api/methods/16-requestExerciseRoute.md",sourceDirName:"api/methods",slug:"/api/methods/requestExerciseRoute",permalink:"/react-native-health-connect/docs/api/methods/requestExerciseRoute",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/16-requestExerciseRoute.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{title:"requestExerciseRoute"},sidebar:"tutorialSidebar",previous:{title:"openHealthConnectDataManagement",permalink:"/react-native-health-connect/docs/api/methods/openHealthConnectDataManagement"},next:{title:"Exceptions",permalink:"/react-native-health-connect/docs/api/exceptions"}},c={},l=[],u={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"requestexerciseroute"},(0,o.kt)("inlineCode",{parentName:"h1"},"requestExerciseRoute")),(0,o.kt)("p",null,"Health Connect requires users' permission to access routes for exercise records (",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/health-and-fitness/guides/health-connect/develop/exercise-routes"},"see Android docs"),"). When exercise records are fetched, they will include an ",(0,o.kt)("inlineCode",{parentName:"p"},"exerciseRoute")," field with a ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," (and possibly a ",(0,o.kt)("inlineCode",{parentName:"p"},"route"),"). This method should be called to request permissions to fetch the route if the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"ExerciseRouteResultType.CONSENT_REQUIRED"),"."),(0,o.kt)("p",null,"NOTE: To read exercise routes, you need to declare the required permissions in your app's ",(0,o.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<application>\n  <uses-permission\nandroid:name="android.permission.health.READ_EXERCISE_ROUTES" />\n  <uses-permission\nandroid:name="android.permission.health.READ_EXERCISE" />\n...\n</application>\n')),(0,o.kt)("h1",{id:"method"},"Method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"requestExerciseRoute(recordId: string): Promise<ExerciseRoute>\n")),(0,o.kt)("h1",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  requestExerciseRoute,\n  readRecord,\n  ExerciseRouteResultType,\n} from "react-native-health-connect";\n\nconst recordId = "6bd8109d-349b-319a-890a-c5a20902b530";\n\nreadRecord("ExerciseSession", recordId)\n  .then((exercise) => {\n    console.log("Exercise record: ", JSON.stringify(exercise, null, 2));\n\n    // Check if consent is required to read route:\n    if (\n      exercise.exerciseRoute.type === ExerciseRouteResultType.CONSENT_REQUIRED\n    ) {\n      requestExerciseRoute(recordId).then(({ route }) => {\n        if (route) {\n          console.log(JSON.stringify(route, null, 2));\n        } else {\n          console.log("User denied access");\n        }\n      });\n    }\n  })\n  .catch((err) => {\n    console.error("Error reading exercise record", { err });\n  });\n  \n')))}p.isMDXComponent=!0}}]);