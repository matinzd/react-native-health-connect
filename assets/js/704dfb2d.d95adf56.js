"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[444],{12:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"api/methods/readRecords","title":"readRecords","description":"Retrieves a collection of records.","source":"@site/docs/api/methods/07-readRecords.md","sourceDirName":"api/methods","slug":"/api/methods/readRecords","permalink":"/react-native-health-connect/docs/api/methods/readRecords","draft":false,"unlisted":false,"editUrl":"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/07-readRecords.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"readRecords"},"sidebar":"tutorialSidebar","previous":{"title":"insertRecords","permalink":"/react-native-health-connect/docs/api/methods/insertRecords"},"next":{"title":"readRecord","permalink":"/react-native-health-connect/docs/api/methods/readRecord"}}');var o=t(4848),d=t(8453);const c={title:"readRecords"},s="readRecords",a={},i=[];function l(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"readrecords",children:(0,o.jsx)(r.code,{children:"readRecords"})})}),"\n",(0,o.jsx)(r.p,{children:"Retrieves a collection of records."}),"\n",(0,o.jsx)(r.h1,{id:"method",children:"Method"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"function readRecords<T extends RecordType>(\n    // record type e.g activeCaloriesBurned\n    recordType: T,\n\n    // read options such as time range filter, data origin filter, ordering and pagination\n    options: ReadRecordsOptions\n): Promise<ReadRecordsResult<T>>\n"})}),"\n",(0,o.jsx)(r.h1,{id:"example",children:"Example"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { readRecords } from \'react-native-health-connect\';\n\nconst readSampleData = () => {\n  readRecords(\'ActiveCaloriesBurned\', {\n    timeRangeFilter: {\n      operator: \'between\',\n      startTime: \'2023-01-09T12:00:00.405Z\',\n      endTime: \'2023-01-09T23:53:15.405Z\',\n    },\n  }).then(({ records }) => {\n    console.log(\'Retrieved records: \', JSON.stringify({ records }, null, 2)); // Retrieved records:  {"records":[{"startTime":"2023-01-09T12:00:00.405Z","endTime":"2023-01-09T23:53:15.405Z","energy":{"inCalories":15000000,"inJoules":62760000.00989097,"inKilojoules":62760.00000989097,"inKilocalories":15000},"metadata":{"id":"239a8cfd-990d-42fc-bffc-c494b829e8e1","lastModifiedTime":"2023-01-17T21:06:23.335Z","clientRecordId":null,"dataOrigin":"com.healthconnectexample","clientRecordVersion":0,"device":0}}]}\n  });\n};\n'})})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>s});var n=t(6540);const o={},d=n.createContext(o);function c(e){const r=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(d.Provider,{value:r},e.children)}}}]);