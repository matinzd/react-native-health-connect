"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[625],{8216:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/methods/aggregateGroupByDuration","title":"aggregateGroupByDuration","description":"Reads aggregated group result by Duration according to requested read criteria. timeRangeSlicer needs to be specified for the Duration type (MILLIS\' | \'SECONDS\' | \'MINUTES\' | \'HOURS\' | \'DAYS) and length. Some record types do not support aggregation.","source":"@site/docs/api/methods/10-aggregateGroupByDuration.md","sourceDirName":"api/methods","slug":"/api/methods/aggregateGroupByDuration","permalink":"/react-native-health-connect/docs/api/methods/aggregateGroupByDuration","draft":false,"unlisted":false,"editUrl":"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/10-aggregateGroupByDuration.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"aggregateGroupByDuration"},"sidebar":"tutorialSidebar","previous":{"title":"aggregateRecord","permalink":"/react-native-health-connect/docs/api/methods/aggregateRecord"},"next":{"title":"aggregateGroupByPeriod","permalink":"/react-native-health-connect/docs/api/methods/aggregateGroupByPeriod"}}');var a=r(4848),o=r(8453);const i={title:"aggregateGroupByDuration"},s="aggregateGroupByDuration",g={},d=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"aggregategroupbyduration",children:(0,a.jsx)(t.code,{children:"aggregateGroupByDuration"})})}),"\n",(0,a.jsxs)(t.p,{children:["Reads aggregated group result by Duration according to requested read criteria. ",(0,a.jsx)(t.code,{children:"timeRangeSlicer"})," needs to be specified for the Duration type (",(0,a.jsx)(t.code,{children:"MILLIS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS"}),") and length. Some record types do not support aggregation."]}),"\n",(0,a.jsx)(t.h1,{id:"method",children:"Method"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"aggregateGroupByDuration<T extends AggregateResultRecordType>(\n  request: AggregateGroupByDurationRequest<T>\n): Promise<AggregationGroupResult<T>[]>\n"})}),"\n",(0,a.jsx)(t.h1,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { aggregateGroupByDuration } from \'react-native-health-connect\';\n\nconst aggregateSampleData = () => {\n  aggregateGroupByDuration({\n    recordType: \'Steps\',\n    timeRangeFilter: {\n      operator: \'between\',\n      startTime: \'2024-10-04T15:00:00Z\',\n      endTime: \'2024-10-12T14:57:39.714Z\',\n    },\n    timeRangeSlicer: {\n      duration: \'DAYS\',\n      length: 2,\n    },\n  }).then((result) => {\n    console.log(\'Aggregated Group by Duration: \', { result }); // Aggregated record: {"result": [{"endTime": "2024-10-06T15:00:00Z", "startTime": "2024-10-04T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 3000}}, {"endTime": "2024-10-08T15:00:00Z", "startTime": "2024-10-06T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 7000}}, {"endTime": "2024-10-10T15:00:00Z", "startTime": "2024-10-08T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 11000}}, {"endTime": "2024-10-12T14:57:39.714Z", "startTime": "2024-10-10T15:00:00Z", "zoneOffset": "+09:00", "result": {"dataOrigins": [], "COUNT_TOTAL": 7000}}]}\n  });\n};\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var n=r(6540);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);