"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[459],{2199:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"contributing","title":"Contributing","description":"Contributions are always welcome, no matter how large or small!","source":"@site/docs/contributing.md","sourceDirName":".","slug":"/contributing","permalink":"/react-native-health-connect/docs/contributing","draft":false,"unlisted":false,"editUrl":"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/contributing.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Contributing"},"sidebar":"tutorialSidebar","previous":{"title":"Exceptions","permalink":"/react-native-health-connect/docs/api/exceptions"},"next":{"title":"Troubleshooting","permalink":"/react-native-health-connect/docs/troubleshooting"}}');var r=t(4848),s=t(8453);const o={sidebar_position:5,title:"Contributing"},l="Contributing",c={},a=[{value:"Development workflow",id:"development-workflow",level:2},{value:"Commit message convention",id:"commit-message-convention",level:3},{value:"Linting and tests",id:"linting-and-tests",level:3},{value:"Scripts",id:"scripts",level:3},{value:"Sending a pull request",id:"sending-a-pull-request",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"contributing",children:"Contributing"})}),"\n",(0,r.jsx)(n.p,{children:"Contributions are always welcome, no matter how large or small!"}),"\n",(0,r.jsx)(n.p,{children:"We want this community to be friendly and respectful to each other. Please follow it in all your interactions with the project."}),"\n",(0,r.jsx)(n.h2,{id:"development-workflow",children:"Development workflow"}),"\n",(0,r.jsxs)(n.p,{children:["To get started with the project, run ",(0,r.jsx)(n.code,{children:"yarn"})," in the root directory to install the required dependencies for each package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["While it's possible to use ",(0,r.jsx)(n.a,{href:"https://github.com/npm/cli",children:(0,r.jsx)(n.code,{children:"npm"})}),", the tooling is built around ",(0,r.jsx)(n.a,{href:"https://classic.yarnpkg.com/",children:(0,r.jsx)(n.code,{children:"yarn"})}),", so you'll have an easier time if you use ",(0,r.jsx)(n.code,{children:"yarn"})," for development."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"While developing, you can run the example app to test your changes. Any changes you make in your library's JavaScript code will be reflected in the example app without a rebuild. If you change any native code, then you'll need to rebuild the example app."}),"\n",(0,r.jsx)(n.p,{children:"To start the packager:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn example start\n"})}),"\n",(0,r.jsx)(n.p,{children:"To run the example app on Android:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn example android\n"})}),"\n",(0,r.jsx)(n.p,{children:"To run the example app on iOS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn example ios\n"})}),"\n",(0,r.jsx)(n.p,{children:"By default, the example is configured to build with the old architecture. To run the example with the new architecture, you can do the following:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"For Android, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"ORG_GRADLE_PROJECT_newArchEnabled=true yarn example android\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"For iOS, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"RCT_NEW_ARCH_ENABLED=1 yarn example pods\nyarn example ios\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If you are building for a different architecture than your previous build, make sure to remove the build folders first. You can run the following command to cleanup all build folders:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn clean\n"})}),"\n",(0,r.jsx)(n.p,{children:"To confirm that the app is running with the new architecture, you can check the Metro logs for a message like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'Running "HealthConnectExample" with {"fabric":true,"initialProps":{"concurrentRoot":true},"rootTag":1}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note the ",(0,r.jsx)(n.code,{children:'"fabric":true'})," and ",(0,r.jsx)(n.code,{children:'"concurrentRoot":true'})," properties."]}),"\n",(0,r.jsx)(n.p,{children:"Make sure your code passes TypeScript and ESLint. Run the following to verify:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn typecheck\nyarn lint\n"})}),"\n",(0,r.jsx)(n.p,{children:"To fix formatting errors, run the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn lint --fix\n"})}),"\n",(0,r.jsx)(n.p,{children:"Remember to add tests for your change if possible. Run the unit tests by:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn test\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To edit the Objective-C or Swift files, open ",(0,r.jsx)(n.code,{children:"example/ios/HealthConnectExample.xcworkspace"})," in XCode and find the source files at ",(0,r.jsx)(n.code,{children:"Pods > Development Pods > react-native-health-connect"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To edit the Java or Kotlin files, open ",(0,r.jsx)(n.code,{children:"example/android"})," in Android studio and find the source files at ",(0,r.jsx)(n.code,{children:"react-native-health-connect"})," under ",(0,r.jsx)(n.code,{children:"Android"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"commit-message-convention",children:"Commit message convention"}),"\n",(0,r.jsxs)(n.p,{children:["We follow the ",(0,r.jsx)(n.a,{href:"https://www.conventionalcommits.org/en",children:"conventional commits specification"})," for our commit messages:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fix"}),": bug fixes, e.g. fix crash due to deprecated method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"feat"}),": new features, e.g. add new method to the module."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"refactor"}),": code refactor, e.g. migrate from class components to hooks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"docs"}),": changes into documentation, e.g. add usage example for the module.."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test"}),": adding or updating tests, e.g. add integration tests using detox."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"chore"}),": tooling changes, e.g. change CI config."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Our pre-commit hooks verify that your commit message matches this format when committing."}),"\n",(0,r.jsx)(n.h3,{id:"linting-and-tests",children:"Linting and tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://eslint.org/",children:"ESLint"}),", ",(0,r.jsx)(n.a,{href:"https://prettier.io/",children:"Prettier"}),", ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"TypeScript"})]}),"\n",(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"TypeScript"})," for type checking, ",(0,r.jsx)(n.a,{href:"https://eslint.org/",children:"ESLint"})," with ",(0,r.jsx)(n.a,{href:"https://prettier.io/",children:"Prettier"})," for linting and formatting the code, and ",(0,r.jsx)(n.a,{href:"https://jestjs.io/",children:"Jest"})," for testing."]}),"\n",(0,r.jsx)(n.p,{children:"Our pre-commit hooks verify that the linter and tests pass when committing."}),"\n",(0,r.jsx)(n.h3,{id:"scripts",children:"Scripts"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"package.json"})," file contains various scripts for common tasks:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yarn bootstrap"}),": setup project by installing all dependencies and pods."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yarn typecheck"}),": type-check files with TypeScript."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yarn lint"}),": lint files with ESLint."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yarn test"}),": run unit tests with Jest."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yarn example start"}),": start the Metro server for the example app."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yarn example android"}),": run the example app on Android."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yarn example ios"}),": run the example app on iOS."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"sending-a-pull-request",children:"Sending a pull request"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Working on your first pull request?"})," You can learn how from this ",(0,r.jsx)(n.em,{children:"free"})," series: ",(0,r.jsx)(n.a,{href:"https://app.egghead.io/playlists/how-to-contribute-to-an-open-source-project-on-github",children:"How to Contribute to an Open Source Project on GitHub"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When you're sending a pull request:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Prefer small pull requests focused on one change."}),"\n",(0,r.jsx)(n.li,{children:"Verify that linters and tests are passing."}),"\n",(0,r.jsx)(n.li,{children:"Review the documentation to make sure it looks good."}),"\n",(0,r.jsx)(n.li,{children:"Follow the pull request template when opening a pull request."}),"\n",(0,r.jsx)(n.li,{children:"For pull requests that change the API or implementation, discuss with maintainers first by opening an issue."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);